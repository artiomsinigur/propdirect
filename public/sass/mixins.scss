@mixin mobile-large {
  @media (max-width: #{$mobile-width-large}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin desktop-large {
  @media (min-width: #{$desktop-width-large}) {
    @content;
  }
}

@mixin retina {
  @media (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
    @content;
  }
}

/* Helpers
=================================== */
@mixin clearfix {
  &::after {
    display: table;
    clear: both;
    content: "";
  }
}

@mixin no-list-style {
  padding: 0;
  margin: 0;
  list-style: none;
}

// Create a visual horizontal grid
// to visualize the vertical rhythm
@mixin grid-vertical-rhythm {
  body {
    position: relative;
    height: 100vh;

    &::after {
      position: absolute;
      top: 0;
      z-index: -1;
      width: 100%;
      height: 100%;
      content: "";
      background-image: linear-gradient(#ccc 1px, transparent 1px);
      background-size: 100% 1.5rem;
    }
  }
}

/* Function
====================================== */
// Function to calculate px to rem
// Allows to include the px unit or not
@function rem($pixels, $context: $font-size-base) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}

//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(
        #{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}
      );
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
